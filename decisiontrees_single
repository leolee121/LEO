import os
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.multioutput import MultiOutputClassifier
from sklearn.metrics import multilabel_confusion_matrix
from sklearn.metrics import accuracy_score, classification_report
from sklearn.metrics import hamming_loss,zero_one_loss, label_ranking_loss, average_precision_score
plt.rcParams['font.sans-serif'] = ['SimHei']  # 用来正常显示中文标签
plt.rcParams['axes.unicode_minus'] = False  # 用来正常显示负号
df = pd.read_csv('L:/experimental_data/data_combine/output_file/sampled_data2.csv')
df.head()
X = df[['T_com_out','T_con_in','T_con_out','T_cap_in','T_cap_out','T_eva_in','T_eva_out','T_com_in','T_eva_outlet','power']].values
y = df[['class1', 'class2', 'class3','class4']].values
# 将数据集划分为训练集和测试集
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.4, random_state=42)
# 创建随机森林模型
tree_model = DecisionTreeClassifier(random_state=42)

# 使用MultiOutputClassifier包装随机森林模型
multi_output_tree_model = MultiOutputClassifier(tree_model, n_jobs=-1)

# 训练模型
multi_output_tree_model.fit(X_train, y_train)
    # 进行预测
y_pred = multi_output_tree_model.predict(X_test)
predictions_df = pd.DataFrame(data=y_pred, columns=['predict1', 'predict2', 'predict3','predict4'])
result_df = pd.concat([pd.DataFrame(X_test, columns=['T_com_out','T_con_in','T_con_out','T_cap_in','T_cap_out','T_eva_in','T_eva_out','T_com_in','T_eva_outlet','power']),
                      pd.DataFrame(y_test, columns=['class1', 'class2', 'class3','class4']),predictions_df], axis=1)
confusion_matrices = multilabel_confusion_matrix(y_test, y_pred)
output_folder = 'L:/experimental_data/data_combine/output_file/DecisionTrees'
os.makedirs(output_folder, exist_ok=True)
# 设置字体大小
font_size = 18
# 可视化混淆矩阵并保存到文件夹
for i, conf_matrix in enumerate(confusion_matrices):
    label_name = f'标签{i+1}'
    plt.figure(figsize=(9, 7))
    sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues',
                xticklabels=['0', '1'], yticklabels=['0', '1'],
                annot_kws={"size": 20, "ha": 'center', "va": 'center'},
                cbar_kws={"label": " ", "orientation": "vertical", "shrink": 1, "extend": "both", "anchor": (0.5, 1.0)}),
    plt.title(f'混淆矩阵{i+1}', fontsize=20)
    plt.xlabel('预测标签',fontsize=font_size)
    plt.ylabel('实际标签',fontsize=font_size)
     # 设置混淆矩阵标签字体大小
    plt.xticks(fontsize=font_size)
    plt.yticks(fontsize=font_size)
    plt.savefig(os.path.join(output_folder, f'confusion_matrix_{label_name}.png'))
    plt.close()
print(f'混淆矩阵图已保存到文件夹: {output_folder}')
# 通过手动计算，得到覆盖率和汉明损失
coverage = sum([min(conf_matrix[1, :]) / len(y_test) for conf_matrix in confusion_matrices]) / len(confusion_matrices)
hamming_loss_value = hamming_loss(y_test, y_pred)
zero_one_loss_value = zero_one_loss(y_test, y_pred)
ranking_loss = label_ranking_loss(y_test, y_pred)
average_precision = average_precision_score(y_test, y_pred)
# 创建包含计算结果的DataFrame
results_df = pd.DataFrame({'覆盖率': [coverage],
                           '汉明损失': [hamming_loss_value],
                           '0-1错误率': [zero_one_loss_value],
                          '排序损失': [ranking_loss],
                          '平均精确度': [average_precision]})
result_df.to_csv('L:/experimental_data/data_combine/output_file/DecisionTrees/predictions_results.csv', index=False)
results_df.to_csv('L:/experimental_data/data_combine/output_file/DecisionTrees/evaluation.csv', index=False)
        # 评估模型性能
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy}')

# 输出每个标签的分类报告
print('Classification Report:')
print(classification_report(y_test, y_pred))
